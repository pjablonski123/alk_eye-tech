{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"eva-alk-p1","provenance":[{"file_id":"1MAD3QIPH0yspILXjkW0MGdC2wKeftZDI","timestamp":1590974484404},{"file_id":"1CeU0K6T9nOdFmVGprpTj-KPpsA6O0xf8","timestamp":1590885413605}],"mount_file_id":"1WtcXGZobVoQKAOrrx5amxD0mD1fRfnNa","authorship_tag":"ABX9TyPTaqXwnCJl3UrI1kl8bz7I"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Clh5cxfJ3RHq","colab_type":"code","colab":{}},"source":["import keras\n","import numpy as np\n","from keras.preprocessing.image import ImageDataGenerator \n","from keras.applications.inception_v3 import InceptionV3 \n","from keras.layers import Dense, GlobalAveragePooling2D \n","from keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\n","from keras.models import Model \n","from keras import optimizers \n","import matplotlib.pyplot as plt \n","%matplotlib inline\n","from keras.models import load_model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"c_4Q70Ly3Wlf","colab_type":"code","outputId":"0644d25e-5b70-4977-d5f6-6bf33d739b41","executionInfo":{"status":"ok","timestamp":1591140331171,"user_tz":-120,"elapsed":660,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd '/content/drive/My Drive/TEST1'"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/TEST1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Uq0jL2uEe3nq","colab_type":"code","outputId":"b4b3d1db-fb57-4a4a-a34e-a9fb3c4a3cc5","executionInfo":{"status":"ok","timestamp":1591142705878,"user_tz":-120,"elapsed":4660,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# create the base pre-trained model \n","base_model = InceptionV3(weights='imagenet', include_top=False) \n","\n","# Get the output layer from the pre-trained Inception V3 model \n","x = base_model.output \n","\n","# Now, add new layers that will be trained with our data \n","# These layers will be randomly initialized \n","x = GlobalAveragePooling2D()(x) \n","x = Dense(64, activation='relu')(x) \n","predictions = Dense(2, activation='softmax')(x) \n","\n","# Get the final Model to train \n","model = Model(inputs=base_model.input, outputs=predictions) \n","\n","# Freeze the layers from the original base model so that we\n","# don't update the weights for layer in base_model.layers: \n","model.trainable = False\n","\n","adam = optimizers.adam(lr=0.01) \n","# Compile the new model \n","model.compile(optimizer=adam, loss='categorical_crossentropy', \n","              metrics=['accuracy'])\n","\n","#model.fit(X,Y,nb_epoch=5,batch_size=100,verbose=1)    \n","\n","# load weights into new model\n","#loaded_model.load_weights(\"model.03-0.94.hdf5\")\n","print(\"Loaded model from disk\")\n","#model.summary()\n"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Loaded model from disk\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RVig2h_-9E36","colab_type":"code","colab":{}},"source":["train_datagen = ImageDataGenerator(rescale=1./255) \n","test_datagen = ImageDataGenerator(rescale=1./255) \n","train_dir = '/content/drive/My Drive/TEST1/' \n","test_dir = '/content/drive/My Drive/TEST2/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jYWEYv5n9alC","colab_type":"code","outputId":"b94f6c89-0a98-441e-aedf-fc9ffa47ca54","executionInfo":{"status":"ok","timestamp":1591143756817,"user_tz":-120,"elapsed":559,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["train_generator = train_datagen.flow_from_directory( train_dir,\n","  target_size=(299, 299), batch_size=1000, class_mode='categorical')\n","\n","test_generator = test_datagen.flow_from_directory( test_dir,\n","  target_size=(299, 299), batch_size=1000, class_mode='categorical')"],"execution_count":34,"outputs":[{"output_type":"stream","text":["Found 500 images belonging to 2 classes.\n","Found 30 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AoOdjfxfcMEI","colab_type":"code","colab":{}},"source":["base_model = InceptionV3(weights='imagenet', include_top=False)\n","#base_model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HVIEXMFg9iRY","colab_type":"code","colab":{}},"source":["# Get the output layer from the pre-trained Inception V3 model \n","x = base_model.output \n","\n","# Now, add new layers that will be trained with our data \n","# These layers will be randomly initialized \n","x = GlobalAveragePooling2D()(x) \n","x = Dense(64, activation='relu')(x) \n","predictions = Dense(2, activation='softmax')(x) \n","\n","# Get the final Model to train \n","model = Model(inputs=base_model.input, outputs=predictions) \n","\n","# Freeze the layers from the original base model so that we\n","# don't update the weights for layer in base_model.layers: \n","model.trainable = False"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GOytV7M6HcPg","colab_type":"code","colab":{}},"source":["adam = optimizers.adam(lr=0.001) \n","# Compile the new model \n","model.compile(optimizer=adam, loss='categorical_crossentropy', \n","              metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"f3VZpDeDIujA","colab_type":"code","colab":{}},"source":["# Setup a callback to save the best model \n","callbacks = [keras.callbacks.ModelCheckpoint(\n","  'model.{epoch:02d}-{val_accuracy:.2f}.hdf5', \n","  monitor='val_accuracy', verbose=1, save_best_only=True, \n","  mode='max', period=1)]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PAyz__fzLQET","colab_type":"code","outputId":"564ff7d4-944c-487b-ff98-b50e81ab80e8","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1591144739547,"user_tz":-120,"elapsed":259080,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["# Fit the data and output the history \n","history = model.fit_generator(train_generator, verbose=1, \n","  steps_per_epoch=len(train_generator), epochs=100,\n","  validation_data=test_generator,\n","  validation_steps=len(test_generator), callbacks=callbacks)"],"execution_count":43,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","1/1 [==============================] - 8s 8s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00001: val_accuracy improved from -inf to 0.66667, saving model to model.01-0.67.hdf5\n","Epoch 2/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00002: val_accuracy did not improve from 0.66667\n","Epoch 3/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00003: val_accuracy did not improve from 0.66667\n","Epoch 4/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00004: val_accuracy did not improve from 0.66667\n","Epoch 5/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00005: val_accuracy did not improve from 0.66667\n","Epoch 6/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00006: val_accuracy did not improve from 0.66667\n","Epoch 7/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00007: val_accuracy did not improve from 0.66667\n","Epoch 8/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00008: val_accuracy did not improve from 0.66667\n","Epoch 9/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00009: val_accuracy did not improve from 0.66667\n","Epoch 10/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00010: val_accuracy did not improve from 0.66667\n","Epoch 11/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00011: val_accuracy did not improve from 0.66667\n","Epoch 12/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00012: val_accuracy did not improve from 0.66667\n","Epoch 13/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00013: val_accuracy did not improve from 0.66667\n","Epoch 14/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00014: val_accuracy did not improve from 0.66667\n","Epoch 15/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00015: val_accuracy did not improve from 0.66667\n","Epoch 16/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00016: val_accuracy did not improve from 0.66667\n","Epoch 17/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00017: val_accuracy did not improve from 0.66667\n","Epoch 18/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00018: val_accuracy did not improve from 0.66667\n","Epoch 19/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00019: val_accuracy did not improve from 0.66667\n","Epoch 20/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00020: val_accuracy did not improve from 0.66667\n","Epoch 21/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00021: val_accuracy did not improve from 0.66667\n","Epoch 22/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00022: val_accuracy did not improve from 0.66667\n","Epoch 23/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00023: val_accuracy did not improve from 0.66667\n","Epoch 24/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00024: val_accuracy did not improve from 0.66667\n","Epoch 25/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00025: val_accuracy did not improve from 0.66667\n","Epoch 26/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00026: val_accuracy did not improve from 0.66667\n","Epoch 27/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00027: val_accuracy did not improve from 0.66667\n","Epoch 28/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00028: val_accuracy did not improve from 0.66667\n","Epoch 29/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00029: val_accuracy did not improve from 0.66667\n","Epoch 30/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00030: val_accuracy did not improve from 0.66667\n","Epoch 31/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00031: val_accuracy did not improve from 0.66667\n","Epoch 32/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00032: val_accuracy did not improve from 0.66667\n","Epoch 33/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00033: val_accuracy did not improve from 0.66667\n","Epoch 34/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00034: val_accuracy did not improve from 0.66667\n","Epoch 35/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00035: val_accuracy did not improve from 0.66667\n","Epoch 36/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00036: val_accuracy did not improve from 0.66667\n","Epoch 37/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00037: val_accuracy did not improve from 0.66667\n","Epoch 38/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00038: val_accuracy did not improve from 0.66667\n","Epoch 39/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00039: val_accuracy did not improve from 0.66667\n","Epoch 40/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00040: val_accuracy did not improve from 0.66667\n","Epoch 41/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00041: val_accuracy did not improve from 0.66667\n","Epoch 42/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00042: val_accuracy did not improve from 0.66667\n","Epoch 43/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00043: val_accuracy did not improve from 0.66667\n","Epoch 44/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00044: val_accuracy did not improve from 0.66667\n","Epoch 45/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00045: val_accuracy did not improve from 0.66667\n","Epoch 46/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00046: val_accuracy did not improve from 0.66667\n","Epoch 47/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00047: val_accuracy did not improve from 0.66667\n","Epoch 48/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00048: val_accuracy did not improve from 0.66667\n","Epoch 49/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00049: val_accuracy did not improve from 0.66667\n","Epoch 50/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00050: val_accuracy did not improve from 0.66667\n","Epoch 51/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00051: val_accuracy did not improve from 0.66667\n","Epoch 52/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00052: val_accuracy did not improve from 0.66667\n","Epoch 53/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00053: val_accuracy did not improve from 0.66667\n","Epoch 54/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00054: val_accuracy did not improve from 0.66667\n","Epoch 55/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00055: val_accuracy did not improve from 0.66667\n","Epoch 56/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00056: val_accuracy did not improve from 0.66667\n","Epoch 57/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00057: val_accuracy did not improve from 0.66667\n","Epoch 58/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00058: val_accuracy did not improve from 0.66667\n","Epoch 59/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00059: val_accuracy did not improve from 0.66667\n","Epoch 60/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00060: val_accuracy did not improve from 0.66667\n","Epoch 61/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00061: val_accuracy did not improve from 0.66667\n","Epoch 62/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00062: val_accuracy did not improve from 0.66667\n","Epoch 63/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00063: val_accuracy did not improve from 0.66667\n","Epoch 64/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00064: val_accuracy did not improve from 0.66667\n","Epoch 65/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00065: val_accuracy did not improve from 0.66667\n","Epoch 66/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00066: val_accuracy did not improve from 0.66667\n","Epoch 67/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00067: val_accuracy did not improve from 0.66667\n","Epoch 68/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00068: val_accuracy did not improve from 0.66667\n","Epoch 69/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00069: val_accuracy did not improve from 0.66667\n","Epoch 70/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00070: val_accuracy did not improve from 0.66667\n","Epoch 71/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00071: val_accuracy did not improve from 0.66667\n","Epoch 72/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00072: val_accuracy did not improve from 0.66667\n","Epoch 73/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00073: val_accuracy did not improve from 0.66667\n","Epoch 74/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00074: val_accuracy did not improve from 0.66667\n","Epoch 75/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00075: val_accuracy did not improve from 0.66667\n","Epoch 76/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00076: val_accuracy did not improve from 0.66667\n","Epoch 77/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00077: val_accuracy did not improve from 0.66667\n","Epoch 78/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00078: val_accuracy did not improve from 0.66667\n","Epoch 79/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00079: val_accuracy did not improve from 0.66667\n","Epoch 80/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00080: val_accuracy did not improve from 0.66667\n","Epoch 81/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00081: val_accuracy did not improve from 0.66667\n","Epoch 82/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00082: val_accuracy did not improve from 0.66667\n","Epoch 83/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00083: val_accuracy did not improve from 0.66667\n","Epoch 84/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00084: val_accuracy did not improve from 0.66667\n","Epoch 85/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00085: val_accuracy did not improve from 0.66667\n","Epoch 86/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00086: val_accuracy did not improve from 0.66667\n","Epoch 87/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00087: val_accuracy did not improve from 0.66667\n","Epoch 88/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00088: val_accuracy did not improve from 0.66667\n","Epoch 89/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00089: val_accuracy did not improve from 0.66667\n","Epoch 90/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00090: val_accuracy did not improve from 0.66667\n","Epoch 91/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00091: val_accuracy did not improve from 0.66667\n","Epoch 92/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00092: val_accuracy did not improve from 0.66667\n","Epoch 93/100\n","1/1 [==============================] - 3s 3s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00093: val_accuracy did not improve from 0.66667\n","Epoch 94/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00094: val_accuracy did not improve from 0.66667\n","Epoch 95/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00095: val_accuracy did not improve from 0.66667\n","Epoch 96/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00096: val_accuracy did not improve from 0.66667\n","Epoch 97/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00097: val_accuracy did not improve from 0.66667\n","Epoch 98/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00098: val_accuracy did not improve from 0.66667\n","Epoch 99/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00099: val_accuracy did not improve from 0.66667\n","Epoch 100/100\n","1/1 [==============================] - 2s 2s/step - loss: 0.6872 - accuracy: 0.5380 - val_loss: 0.6551 - val_accuracy: 0.6667\n","\n","Epoch 00100: val_accuracy did not improve from 0.66667\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"K59QtXezLV7Q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":545},"outputId":"5559a632-0e03-4aca-d62b-3093f903a7b9","executionInfo":{"status":"ok","timestamp":1591144791257,"user_tz":-120,"elapsed":887,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["def plot_history(history): \n","    acc = history.history['accuracy'] \n","    val_acc = history.history['val_accuracy'] \n","    loss = history.history['loss'] \n","    val_loss = history.history['val_loss'] \n","    epochs = range(1, len(acc) + 1) \n","    \n","    plt.figure() \n","    plt.title('Training and validation accuracy') \n","    plt.plot(epochs, acc, 'bo', label='Training acc')\n","    plt.plot(epochs, val_acc, 'b', color='red', \\\n","      label='Validation acc') \n","    plt.legend() \n","    plt.show() \n","   \n","    plt.figure() \n","    plt.title('Training and validation loss')\n","    plt.plot(epochs, loss, 'bo', label='Training loss')\n","    plt.plot(epochs, val_loss, 'b', color='red', \\\n","      label='Validation loss') \n","    plt.legend() \n","    plt.show() \n","    return acc, val_acc, loss, val_loss \n","\n","acc, val_acc, loss, val_loss = plot_history(history)"],"execution_count":44,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gs6ckcFQLl6_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3b8d175d-5c0a-41e4-a327-05961a9f487a","executionInfo":{"status":"ok","timestamp":1591144792948,"user_tz":-120,"elapsed":568,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["cd '/content/drive/My Drive/TEST1'"],"execution_count":45,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/TEST1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MWfDktW-nOal","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"55023ba6-8d18-427b-fb50-d81c9e65517f","executionInfo":{"status":"ok","timestamp":1591145450642,"user_tz":-120,"elapsed":6346,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["model = load_model('model.03-0.94.hdf5')"],"execution_count":57,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:384: UserWarning: Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","  warnings.warn('Error in loading the saved optimizer '\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"QTvRL0NlnzxH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"a5177729-d84d-4414-f108-82e71ca5d8b7","executionInfo":{"status":"ok","timestamp":1591145783758,"user_tz":-120,"elapsed":35713,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["model = load_model('model.01-0.67.hdf5')"],"execution_count":75,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:384: UserWarning: Error in loading the saved optimizer state. As a result, your model is starting with a freshly initialized optimizer.\n","  warnings.warn('Error in loading the saved optimizer '\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"IBLZs1kMnaC6","colab_type":"code","colab":{}},"source":["# Utility functions\n","classes = ['CNV',  'NORMAL']\n","# Preprocess the input\n","# Rescale the values to the same range that was used during training \n","def preprocess_input(x):\n","    x = img_to_array(x) / 255.\n","    return np.expand_dims(x, axis=0) \n","\n","# Prediction for an image path in the local directory\n","def predict_from_image_path(image_path):\n","    return predict_image(load_img(image_path, target_size=(299, 299)))\n","\n","# Prediction for an image URL path\n","def predict_from_image_url(image_url):\n","    res = requests.get(image_url)\n","    im = Image.open(BytesIO(res.content))\n","    return predict_from_image_path(im.fp)\n","    \n","# Predict an image\n","def predict_image(im):\n","    x = preprocess_input(im)\n","    pred = np.argmax(model.predict(x))\n","    return pred, classes[pred]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lHQXkyXhnPtU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"10e31198-e89f-4830-a056-890ee47d0c3f","executionInfo":{"status":"ok","timestamp":1591145677920,"user_tz":-120,"elapsed":631,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["print(predict_from_image_path('/content/drive/My Drive/TEST2/CNV/test2c.jpeg'))\n","#grad_CAM('/content/drive/My Drive/TEST2/CNV/test2d.jpeg')"],"execution_count":73,"outputs":[{"output_type":"stream","text":["(0, 'CNV')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jmk73ohjoG1Q","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"72be0e53-cd8d-41c2-cf9e-d369db59cc24","executionInfo":{"status":"ok","timestamp":1591145848087,"user_tz":-120,"elapsed":4650,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["print(predict_from_image_path('/content/drive/My Drive/TRAIN1/CNV/CNV-13823-1.jpeg'))"],"execution_count":77,"outputs":[{"output_type":"stream","text":["(0, 'CNV')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"syZs5i1iqTN8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"953196ce-c17d-41e8-f6b0-df5ca954e0aa","executionInfo":{"status":"ok","timestamp":1591145928219,"user_tz":-120,"elapsed":826,"user":{"displayName":"Piotr Jablonski","photoUrl":"","userId":"14989719145641357731"}}},"source":["print(predict_from_image_path('/content/drive/My Drive/TRAIN1/CNV/Copy of NORMAL-98994-10.jpeg'))"],"execution_count":79,"outputs":[{"output_type":"stream","text":["(1, 'NORMAL')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9sR10KOaqlf6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}